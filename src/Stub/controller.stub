<?php

namespace {{namespace}};

use {{model_class}};
use App\Exceptions\BatchActionException;
use App\Http\Controllers\Controller;
use App\Http\Resources\BaseResource;
use App\Http\Resources\FormWidgetCollection;
use {{request_class}};

/**
 * {{entity_name}}控制器
 *
 * @package_name {zh-CN: {{package_name}} | en: {{package_en_name}}}
 * @module_name {zh-CN: {{module_name}} | en: {{module_en_name}}}
 * @controller_name {zh-CN: {{entity_name}}管理 | en: Management {{entity_en_name}}}
 *
 * @package {{namespace}};
 * @author  {{author}}
 * @date    {{date}}
 */
class {{class}} extends Controller
{

    protected $model;

    /**
     *
     * @param \{{model_class}} $model
     */
    public function __construct({{model_name}} $model)
    {
        $this->model = $model;
    }

    /**
     * 执行 action 前先验证权限
     *
     * @param  string $method
     * @return \Illuminate\Auth\Access\Response
     */
    public function boot($method)
    {
        $this->checkAuthorization($method);
    }

    /**
     * 列表
     *
     * @acl {zh-CN: {{entity_name}}列表 | en: {{entity_en_name}} List}
     *
     * @param  \{{request_class}}  $request
     * @return \Illuminate\Http\Resources\Json\AnonymousResourceCollection
     */
    public function index({{request_name}} $request)
    {
        $validated = $request->validated();

        $result    = $this->model->paginate(($validated['page_limit'] ?? NULL));

        return BaseResource::collection($result);
    }

    /**
     * 回收站列表
     *
     * @acl {zh-CN: {{entity_name}}回收站 | en: {{entity_en_name}} Trashed}
     *
     * @param  \{{request_class}} $request
     * @return \Illuminate\Http\Resources\Json\AnonymousResourceCollection
     */
    public function trashed({{request_name}} $request)
    {
        $validated = $request->validated();

        $result    = $this->model->onlyTrashed()->paginate(($validated['page_limit'] ?? NULL));

        return BaseResource::collection($result);
    }

    /**
     * 创建
     *
     * @acl {zh-CN: 创建{{entity_name}} | en: Create {{entity_en_name}}}
     *
     * @param  \{{request_class}} $request
     * @return \App\Http\Resources\BaseResource
     */
    public function store({{request_name}} $request)
    {
        $validated = $request->validated();

        $result = new $this->model($validated);
        $result->save();

        return new BaseResource($result);
    }

    /**
     * 更新
     *
     * @acl {zh-CN: 更新{{entity_name}} | en: Update {{entity_en_name}}}
     *
     * @param  \{{request_class}} $request
     * @param  int $id
     * @return \App\Http\Resources\BaseResource
     */
    public function update({{request_name}} $request, $id)
    {
        $validated = $request->validated();

        $result = $this->model->findOrFail($id);
        $result->fill($validated);
        $result->save();

        return new BaseResource($result);
    }

    /**
     * 查看
     *
     * @acl {zh-CN: 查看{{entity_name}} | en: Show {{entity_en_name}}}
     *
     * @param  int $id
     * @return \App\Http\Resources\BaseResource
     */
    public function show($id)
    {
        $result = $this->model->findOrFail($id);

        return new BaseResource($result);
    }

    /**
     * 删除
     *
     * @acl {zh-CN: 删除{{entity_name}} | en: Destroy {{entity_en_name}}}
     *
     * @param  int $id
     * @return \App\Http\Resources\BaseResource
     */
    public function destroy($id)
    {
        $result = $this->model->findOrFail($id);
        $result->delete();

        return new BaseResource($result);
    }

    /**
     * 批量删除
     *
     * @acl {zh-CN: 批量删除{{entity_name}} | en: Destroy Batch {{entity_en_name}}}
     *
     * @param  \{{request_class}} $request
     * @return \App\Http\Resources\BaseResource
     */
    public function destroyBatch({{request_name}} $request)
    {
        $validated  = $request->validated();
        $force      = isset($validated['force']) ?? FALSE;

        $data       = $force ? $this->model->onlyTrashed() : $this->model;
        $data       = $data->whereIn($this->model->getKeyName(), $validated['ids'])->get();
        $result     = $data->map(function ($item) use ($force) {
            if ($force) {
                if ($item->forceDelete()) return $item;
            }
            else {
                if ($item->delete()) return $item;
            }
        });

        if (count($result) < 1) {
            throw new BatchActionException('No batch operation results.');
        }

        return new BaseResource($result);
    }

    /**
     * 恢复
     *
     * @acl {zh-CN: 恢复{{entity_name}} | en: Restore {{entity_en_name}}}
     *
     * @param  \{{request_class}} $request
     * @return \App\Http\Resources\BaseResource
     */
    public function restore({{request_name}} $request)
    {
        $validated  = $request->validated();

        if ( ! is_array($validated['ids'])) {
            $validated['ids'] = [$validated['ids']];
        }

        $data       = $this->model->onlyTrashed()->whereIn($this->model->getKeyName(), $validated['ids'])->get();
        $result     = $data->map(function ($item) {
            if ($item->restore()) {
                return $item;
            }
        });

        if (count($result) < 1) {
            throw new BatchActionException('No batch operation results.');
        }

        return new BaseResource($result);
    }

    /**
     *  创建表单
     *
     * @param  \{{request_class}}  $request
     * @return \App\Http\Resources\FormWidgetCollection
     */
    public function create({{request_name}} $request)
    {
        $form_widgets = {{form_widgets}};

        return new FormWidgetCollection(collect($form_widgets));
    }

    /**
     * 编辑表单
     *
     * @param  \{{request_class}}  $request
     * @param  int $id
     * @return \App\Http\Resources\FormWidgetCollection
     */
    public function edit({{request_name}} $request, $id)
    {
        $result = $this->model->findOrFail($id);

        return (new BaseResource($result))->additional([
            'form_widgets' => $this->create($request)
        ]);
    }

}
